schema {
  query: Query
  mutation: Mutation
}

directive @external on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

scalar _FieldSet

type Mutation {
  postCreate(input: PostCreateInput!): PostCreatePayload
  postDelete(input: PostDeleteInput!): PostDeletePayload
  userCreate(name: String!): UserCreatePayload
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post implements Node {
  body: String!
  id: ID!
  postId: String!
  title: String!
  userId: String!
}

type PostConnection {
  edges: [PostEdge]!
  pageInfo: PageInfo!
}

input PostCreateInput {
  body: String!
  title: String!
}

type PostCreatePayload {
  post: Post!
  postEdge: PostEdge!
}

input PostDeleteInput {
  postId: String!
}

type PostDeletePayload {
  deletedPostId: ID!
}

type PostEdge {
  cursor: String!
  node: Post!
}

type Query {
  node(id: ID!): Node
  postById(postId: String!): Post
  posts(first: Int! = 30): PostConnection!
  user(id: ID!): User
}

type User {
  id: ID!
  name: String!
  userId: String!
}

type UserCreatePayload {
  user: User!
}